import isArray from 'lodash/isArray';
import { getDeepObjectValue } from '../util';

export const getFieldValueByName = function (name = '', values) {
  const _name = name;
  if (_name.includes('[')) {
    return getDeepObjectValue(values, _name.replace('[', '.').replace(']', '.'));
  } if (_name.includes('.')) {
    return getDeepObjectValue(values, _name);
  }
    return values && values[_name];
};
export const getFieldErrorByName = function (name = '', values) {
  const _name = name;
  if (_name.includes('[')) {
    return getDeepObjectValue(values, _name.replace('[', '.').replace(']', '.'));
  } if (_name.includes('.')) {
    return getDeepObjectValue(values, _name);
  }
    return values && values[_name];
};

export function validURL(s) {
  const regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
  return regexp.test(s);
}

const getTextWithoutFieldName = (value, fieldName) => {
  if (!value) return null;
  const _fieldName = fieldName.includes(']') ? fieldName.replace(']', '].') : fieldName;
  if (typeof value === 'string') return value.replace(_fieldName, '');
  if (isArray(value)) return value.map((val) => val.replace(_fieldName, ''));
};
export const sanitizeFormItemProps = function (props, field, form) {
  const { label, help, required, colon, extra, labelCol, wrapperCol, hideLabel, inputProps = {} } = props;
  /*
        colon	Used with label, whether to display : after label text.	boolean	true
        extra	The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time.	string|ReactNode
        help	The prompt message. If not provided, the prompt message will be generated by the validation rule.	string|ReactNode
        label	Label text	string|ReactNode
        labelCol	The layout of label. You can set span offset to something like {span: 3, offset: 12} or sm: {span: 3, offset: 12} same as with <Col>	object
        required	Whether provided or not, it will be generated by the validation rule.	boolean	false
        wrapperCol	The layout for input controls, same as labelCol	object
    */
  const hasFeedback = getFieldValueByName(field.name, form.touched) && getFieldValueByName(field.name, form.errors);
  const hasFeedbackWithOutFieldName = getTextWithoutFieldName(hasFeedback, field.name);
  return {
    hasFeedback: !!hasFeedback,
    help: help || hasFeedbackWithOutFieldName || '',
    label: hideLabel ? null : label,
    validateStatus: hasFeedback ? 'error' : 'validating',
    required,
    colon,
    extra,
    labelCol,
    wrapperCol,
    className: `ra-docFieldWrapper ra-docField-${field.name}`,
    ...inputProps,
  };
};
export const sanitizeFormikFieldProps = function ({ name }) {
  return { name };
};

export const sanitizeAntdTextInputProps = function ({ onPressEnter, type, suffix, disabled, addonAfter, addonBefore, autosize, autoFocus, className, placeholder }) {
  /*
    autoFocus	get focus when component mounted	boolean	false
    addonAfter	The label text displayed after (on the right side of) the input field.	string|ReactNode
    addonBefore	The label text displayed before (on the left side of) the input field.	string|ReactNode
    defaultValue	The initial input content string
    disabled	Whether the input is disabled.	boolean	false
    id	The ID for input string
    prefix	The prefix icon for the Input.	string|ReactNode
    size	The size of the input box. Note: in the context of a form, the large size is used. Available: large default small	string	default
    suffix	The suffix icon for the Input. string|ReactNode
    type	The type of input, see: MDN(use Input.TextArea instead of type="textarea")	string	text
    value	The input content value	string
    onChange	callback when user input function(e)
    onPressEnter	The callback function that is triggered when Enter key is pressed.	function(e)
*/
  return { onPressEnter, type, suffix, disabled, addonAfter, addonBefore, autosize, autoFocus, className, placeholder };
};
export const sanitizeAntdNumberInputProps = function ({ autoFocus, disabled, formatter, max, min, parser, decimalSeparator, size, step, style, className, placeholder }) {
  /*
    autoFocus	get focus when component mounted	boolean	false
    disabled	disable the input	boolean	false
    formatter	Specifies the format of the value presented	function(value: number | string): string	-
    max	max value	number	Infinity
    min	min value	number	-Infinity
    parser	Specifies the value extracted from formatter	function( string): number	-
    precision	precision of input value	number	-
    decimalSeparator	decimal separator	string	-
    size	width of input box	string	-
    step	The number to which the current value is increased or decreased. It can be an integer or decimal.	number|string	1
*/
  return { autoFocus, disabled, formatter, max, min, parser, decimalSeparator, size, step, style, className, placeholder };
};
export const sanitizeAntdDatePickerInputProps = function ({ onOk, renderExtraFooter, onCalendarChange, suffixIcon, format, showTime, showToday, allowClear, disabled, placeholder }) {
  /*
  onOk: PropTypes.func, // callback when click ok button	function()
  renderExtraFooter: PropTypes.func, // render extra footer in panel	() => React.ReactNode	-
  onCalendarChange: PropTypes.func, // a callback function, can be executed when the start time or the end time of the range is changing	function(dates: moment, moment, dateStrings: string, string)	æ— 
  suffixIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]), // The suffix icon for the Input. string|ReactNode
  size: PropTypes.string, //width of input box	string
  format: PropTypes.string, //to set the date format, refer to moment.js	string	"YYYY-MM-DD"
  showTime: PropTypes.bool, //to provide an additional time selection	object|boolean	TimePicker Options
  showToday: PropTypes.bool, //to provide an additional time selection	object|boolean	TimePicker Options
  allowClear: PropTypes.bool, //Whether to show clear button	boolean	true
  defaultValue: PropTypes.date, //to set default date	moment	-
  autoFocus: PropTypes.bool, // get focus when component mounted	boolean	false
  disabled: PropTypes.bool, // disable the input	boolean	false
*/
  return { onOk, renderExtraFooter, onCalendarChange, suffixIcon, format, showTime, showToday, allowClear, disabled, placeholder };
};

export const sanitizeAntdTimePickerInputProps = function ({ onOk, suffixIcon, format, allowEmpty, disabled, placeholder }) {
  /*
  onOk: PropTypes.func, // callback when click ok button	function()
  suffixIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]), // The suffix icon for the Input. string|ReactNode
  size: PropTypes.string, //width of input box	string
  format: PropTypes.string, //to set the date format, refer to moment.js	string	"YYYY-MM-DD"
  allowEmpty: PropTypes.bool, //Whether to show clear button	boolean	true
  defaultValue: PropTypes.date, //to set default date	moment	-
  autoFocus: PropTypes.bool, // get focus when component mounted	boolean	false
  disabled: PropTypes.bool, // disable the input	boolean	false
*/
  return { onOk, suffixIcon, format, allowEmpty, disabled, placeholder };
};
